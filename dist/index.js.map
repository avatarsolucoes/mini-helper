{"version":3,"file":"index.js","sources":["../src/array.js","../src/glob.js","../src/string.js","../src/ramdom.js","../src/date.js","../src/variables.js","../src/object.js","../src/number.js"],"sourcesContent":["import chunk from 'chunk'\n\n/**\n * Force any values an array\n * @function forceArray\n * @param {any} value\n * @return {Array}\n * @example\n * forceArray('1') // return ['1']\n */\nexport function forceArray(value = []) {\n  return !Array.isArray(value) ? [value] : value\n}\n\n/**\n * If array return first item\n * @function unArray\n * @param {Array} arr\n */\nexport function unArray(arr) {\n  if (!Array.isArray(arr)) return arr\n  if (arr.length > 0) return arr[0]\n  return false\n}\n\n/**\n * @function range\n * @param {Number} begin\n * @param {Number} end\n * @param {Number} interval\n */\nexport function* range(begin, end, interval = 1) {\n  for (let i = begin; i <= end; i += interval) {\n    yield i\n  }\n}\n\n/**\n * @function rangeArray\n * @param {Number} init\n * @param {Number} fim\n * @param {Number} interval\n * @returns {Array<number>}\n * @example\n * rangeArray(1, 5, 1) // [1,2,3,4,5]\n */\nexport function rangeArray(init, fim, interval = 1) {\n  return Array.from(range(init, fim, interval))\n}\n\n/**\n * Convert Buffer in Array\n * @param {Buffer|ArrayBuffer|string} buf dataBuffer\n * @returns {Array} chunked\n * @example\n * buffToArray('A03B18') // return ['A0','3B','18']\n */\nexport function buffToArray(buf, size = 2) {\n  if (!buf) return []\n  if (buf instanceof Buffer) {\n    return chunk(buf.toString('hex'), size)\n  }\n  if (Array.isArray(buf)) return buf\n  return chunk(buf.replace(/ /g, ''), size)\n}\n\n/**\n * @function medianInArray\n * @param {Array<Number>} arr array of Numbers\n * @param {Boolean} withZero\n * @returns {Number}\n */\nexport function medianInArray(arr, withZero) {\n  if (!Array.isArray(arr)) return 0\n  const array = withZero ? arr.map(a => a || 0) : arr.filter(a => !!(a && a > 0))\n  array.sort((a, b) => a - b)\n  const lowMid = Math.floor((array.length - 1) / 2)\n  const highMid = Math.ceil((array.length - 1) / 2)\n  return (array[lowMid] + array[highMid]) / 2\n}\n\n/**\n * @function averageInArray\n * @param {Array<Number>} arr array of Numbers\n * @param {Boolean} withZero\n * @returns {Number}\n */\nexport function averageInArray(arr, withZero) {\n  if (!Array.isArray(arr)) return 0\n  const array = withZero ? arr.map(a => a || 0) : arr.filter(f => f)\n  return array.reduce((a, b) => a + b, 0) / array.length\n}\n\n/**\n * @function sumArray\n * @param {Array<Number>} arrOfNumber\n * @param {boolean} checkNumber\n * @returns {Number} sum\n * @example\n * var arr = [4, 2, 8, 6];\n * sumArray(arr) // return 20\n * sumArray(['1','teste', 2], true) // return 3\n */\nexport function sumArray(arrOfNumber, checkNumber) {\n  const sum = (t, n) => {\n    if (checkNumber) return t + typeof n === 'number' ? n : parseInt(n, 10) || 0\n    return t + n\n  }\n  return forceArray(arrOfNumber).reduce(sum)\n}\n\nexport function includesInArrayObject(arrObject, key, value) {\n  return arrObject.some(el => !!(key in el && el[key] === value))\n}\n","const g =\n  (typeof self === 'object' && self.self === self && self) ||\n  (typeof window === 'object' && window.window === window && window) ||\n  (typeof global === 'object' && global.global === global && global) ||\n  this\n\nexport default g\n","import glob from './glob'\n/* eslint-disable prefer-destructuring */\nexport const defaultForbidenChars = \"'@#$%¨&*()_+{}?^:><|¹²³£¢¬§ªº°;.,~´`=-\"\n/**\n * (string) Remove the first character\n * @function rmFirstChar\n * @param {String} str\n * @returns {String} string modified\n */\nexport function rmFirstChar(str) {\n  return str.slice(1)\n}\n\n/**\n * (string) Remove the last character\n * @function rmLastChar\n * @param {String} str\n * @returns {String} string modified\n */\nexport function rmLastChar(element) {\n  return element.slice(0, element.length - 1)\n}\n\n/**\n * (string) Primeira palavra da sentenca\n * @function firstWord\n * @param {String} text\n * @returns {String}\n * @example\n * firstWord('Leandro Sbrissa') // Leandro\n */\nexport function firstWord(text) {\n  if (!text) return ''\n  const fullName = text.trim().split(' ')\n  return fullName[0]\n}\n\n/**\n * (string) Ultima palavra da sentenca\n * @function lastWord\n * @param {String} text\n * @returns {String}\n * @example\n * lastWord('Leandro Sbrissa') // Sbrissa\n */\nexport function lastWord(text) {\n  if (!text) return ''\n  const fullName = text.trim().split(' ')\n  return fullName.slice(-1).join(' ')\n}\n\n/**\n * @function replaceAll\n * @param {String} str\n * @param {String} needle\n * @param {String} replacement\n * @example\n * replaceAll('T*T', '*', '_') // return 'T_T'\n */\nexport function replaceAll(str, needle, replacement) {\n  if (!str) return ''\n  if (Array.isArray(needle)) {\n    let rtn = `${str}`\n    for (let i = 0; i < needle.length; i++) {\n      rtn = replaceAll(rtn, needle[i], replacement)\n    }\n    return rtn\n  }\n  return str.split(needle).join(replacement)\n}\n\n/**\n * @function removeAll\n * @param {String|Array<string>} str\n * @param {String|Array<string>} chars\n * @returns {String|Array<string>}\n * @example\n * removeAll('TEST#$_', '#$_') // return 'TEST'\n */\nexport function removeAll(str, chars = defaultForbidenChars, replacement = '') {\n  if (!str) return ''\n  if (Array.isArray(str)) return str.map(r => removeAll(r, chars, replacement))\n  const c = Array.isArray(chars) ? chars : chars.split('')\n  let result = str\n  for (let i = 0; i < c.length; i++) result = replaceAll(result, c[i], replacement)\n  return result\n}\n\n/**\n * Primeiras letras em maiuscula\n * @function titleize\n * @param {String} text\n * @returns {String}\n * @example\n * titleize('teste de maiuscula') // Teste de Maiuscula\n */\nexport function titleize(text) {\n  if (!text) return ''\n  const cases = ['de', 'do', 'da', 'dos', 'das', 'a', 'o', 'as', 'os', 'e', 'di']\n  const words = text.toLowerCase().trim().split(' ')\n  return words\n    .map(w => {\n      if (cases.indexOf(w) < 0) {\n        return `${w[0].toUpperCase()}${w.slice(1)}`\n      }\n      return w\n    })\n    .join(' ')\n}\n\n/**\n * Verify if String is MAC address\n * @function isMAC\n * @param {String} strMac\n * @returns {Boolean}\n */\nexport function isMAC(strMac) {\n  if (!strMac) return false\n  if (strMac.indexOf(':') >= 0 && strMac.length !== 17) return false\n  if (strMac.indexOf(':') < 0 && strMac.length !== 12) return false\n  const re = /^[a-fA-F0-9:]{17}|[a-fA-F0-9]{12}$/g\n  return re.test(strMac)\n}\n\nexport function isHexReg(str) {\n  const re = /[0-9A-Fa-f]{6}/g\n  return re.test(str)\n  // re.lastIndex = 0; // be sure to reset the index after using .text()\n}\n\n// export function isHex(h) {\n//   const a = parseInt(h, 16)\n//   return a.toString(16) === h\n// }\n\n/**\n * @function extractHostname\n * @param {String} url\n * @returns {String}\n */\nexport function extractHostname(url) {\n  let hostname\n  if (url.indexOf('//') > -1) {\n    hostname = url.split('/')[2]\n  } else {\n    hostname = url.split('/')[0]\n  }\n  hostname = hostname.split(':')[0]\n  hostname = hostname.split('?')[0]\n  return hostname\n}\n\n/**\n * @function toMask\n * @param {string} mask\n * @param {Number|String} number alphanumeric\n * @returns {String}\n * @example\n * toMask('XXX-XXXX', ABC1234) // ABC-1234\n */\nexport function toMask(mask, number) {\n  if (!number) return ''\n  const s = `${number}`\n  let r = ''\n  for (let im = 0, is = 0; im < mask.length && is < s.length; im++) {\n    r += mask.charAt(im) === 'X' ? s.charAt(is++) : mask.charAt(im)\n  }\n  return r\n}\n\n/**\n * @function isValidTime\n * @param {string} str\n * @returns {Boolean}\n */\nexport function isValidTime(str) {\n  return /^([0-1]?[0-9]|2[0-4]):([0-5][0-9])(:[0-5][0-9])?$/.test(str)\n}\n\n/**\n * @function formatBytes\n * @param {number|string} bytes numero em bytes\n * @param {number} decimals casas decimais\n * @example\n * // formatBytes(bytes,decimals)\n * formatBytes(1024);       // 1 KB\n * formatBytes('1024');     // 1 KB\n * formatBytes(1234);       // 1.21 KB\n * formatBytes(1234, 3);    // 1.205 KB\n */\nexport function formatBytes(bytes, decimals = 2) {\n  if (!bytes || bytes === 0) return '0 Bytes'\n\n  const k = 1024\n  const b = bytes < 0 ? bytes * -1 : bytes\n  const dm = decimals < 0 ? 0 : decimals\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n\n  const i = Math.floor(Math.log(b) / Math.log(k))\n\n  return `${parseFloat((b / Math.pow(k, i)).toFixed(dm))} ${sizes[i]}`\n}\n\n/**\n * @function camelize\n * @param {String} str\n * {@link https://stackoverflow.com/questions/2970525/converting-any-string-into-camel-case StackOverflow}.\n * @example\n * camelize(\"EquipmentClass name\");\n * camelize(\"Equipment className\");\n * camelize(\"equipment class name\");\n * camelize(\"Equipment Class Name\");\n * // all output \"equipmentClassName\"\n */\nexport function camelize(str) {\n  return str\n    .replace(/(?:^\\w|[A-Z]|\\b\\w)/g, (word, index) => {\n      return index === 0 ? word.toLowerCase() : word.toUpperCase()\n    })\n    .replace(/\\s+/g, '')\n}\n\n/**\n * @function urlEncodeObject\n * @param {any} object\n * @returns {string}\n * @example\n * urlEncodeObject({foo: 'fooValue', bar: 'barValue'}) // foo=fooValue&bar=barValue\n */\nexport function urlEncodeObject(object) {\n  if (typeof object !== 'object' || object instanceof Date) return ''\n  const result = []\n  Object.keys(object).forEach(k => {\n    const value = `${object[k]}`\n    glob && glob.encodeURIComponent && result.push(`${k}=${glob.encodeURIComponent(value)}`)\n  })\n  return result.length ? result.join('&') : ''\n}\n","import crypto from 'crypto'\nimport getRandomValues from 'get-random-values'\nimport { v4 as uuid } from 'uuid'\nimport md5 from 'md5'\nimport chunk from 'chunk'\n\n/**\n * Returns a random number between min (inclusive) and max (exclusive)\n * @function getRandomArbitrary\n * @returns {number}\n */\nexport function getRandomArbitrary(min, max) {\n  return Math.random() * (max - min) + min\n}\n\n/**\n * Returns a random integer between min (inclusive) and max (inclusive).\n * @function getRandomInt\n * @param {number} min integer\n * @param {number} max integer\n * @returns {number}\n */\nexport function getRandomInt(min, max) {\n  min = Math.ceil(min)\n  max = Math.floor(max)\n  return Math.floor(Math.random() * (max - min + 1)) + min\n}\n\n/**\n * Gerar caracteres aleatorios\n * @function getRamdomStr\n * @param {Number} len tamanho\n * @param {String} wishlist lista de caracteres para utilizar\n * @example\n * getRamdomStr(4,'0123ABCDEF')\n */\nexport function getRamdomStr(len, whitelist = '123456789ABCEFGHKMPQRSTXYZ') {\n  return Array(len)\n    .fill('')\n    .map(() => {\n      // eslint-disable-next-line no-mixed-operators\n      const q = Math.floor((getRandomValues(new Uint8Array(1))[0] / (0xff + 1)) * whitelist.length)\n      return whitelist[q]\n    })\n    .join('')\n}\n\nexport function getInRamdom(object) {\n  if (Array.isArray(object)) {\n    return object[getRandomInt(0, object.length - 1)]\n  }\n\n  if (typeof object === 'object') {\n    const arrKeys = Object.keys(object)\n    const key = arrKeys[getRandomInt(0, arrKeys.length - 1)]\n    if (key in object) return object[key]\n  }\n\n  if (typeof object === 'function') return getInRamdom(object())\n\n  const arrstr = (object || '123456789ABCEFGHKMPQRSTXYZ').toString().split('')\n  return arrstr[getRandomInt(0, arrstr.length - 1)]\n}\n\n/**\n * @function getRamdomHex\n * @param {Number} size - integer (default 16)\n * @returns {String} - HEX\n * @example\n * hexRamdom() // c05662d445cd3988402521922ba16e29\n */\nexport function getRamdomHex(size = 16) {\n  const result = crypto.randomBytes(size)\n  return result.toString('hex')\n}\n\nexport function generateIdPass(payload, secret = '') {\n  const uid = uuid()\n  const p = JSON.stringify(payload)\n  return md5(`${uid}${p}${secret}${getRamdomHex()}`)\n}\n\n/**\n * @function hashPassword\n * @param {String} payload\n * @param {String} secret\n * @returns {String} HASH MD5\n */\nexport function hashPassword(payload, secret = '') {\n  return md5(`${payload}${secret}`)\n}\n\n/**\n * @function hashMD5\n * @param {String} str\n * @param {Boolean} toBuffer\n */\nexport function hashMD5(str, toBuffer) {\n  const hash = md5(`${str}`)\n  return toBuffer ? Buffer.from(chunk(hash, 2)) : hash\n}\n\n/**\n * @function isMD5\n * @param {String} inputString\n */\nexport function isMD5(inputString) {\n  // if (typeof inputString !== 'string') return false;\n  return /[a-fA-F0-9]{32}/.test(inputString)\n}\n","import moment from 'moment-timezone'\n\n/**\n * @function timeRest\n * @param {Number} inMinutes integer\n */\nexport function timeRest(inMinutes) {\n  const minutes = inMinutes < 0 ? inMinutes * -1 : inMinutes\n  const minutos = 1\n  const horas = 60 // minuto * 60\n  const dias = 1440 // hora * 24\n  const semanas = 10080 // dias * 7\n  const meses = 302400 // semanas * 4\n  const anos = 3628800 // meses * 12\n\n  // let valorInicio = parseInt(minutes, 10) || 0;\n  let valorInicio = minutes\n  let result = ''\n\n  if (valorInicio > anos) {\n    const ano = Math.floor(valorInicio / anos)\n    result += `${ano}y `\n    valorInicio -= anos * ano\n  }\n\n  if (valorInicio > meses) {\n    const mes = Math.floor(valorInicio / meses)\n    result += `${mes}mo `\n    valorInicio -= meses * mes\n  }\n\n  if (valorInicio > semanas) {\n    const semana = Math.floor(valorInicio / semanas)\n    result += `${semana}se `\n    valorInicio -= semanas * semana\n  }\n\n  if (valorInicio > dias) {\n    const dia = Math.floor(valorInicio / dias)\n    result += `${dia}d `\n    valorInicio -= dias * dia\n  }\n\n  if (valorInicio > horas) {\n    const hora = Math.floor(valorInicio / horas)\n    result += `${hora}h `\n    valorInicio -= horas * hora\n  }\n\n  if (valorInicio > minutos) {\n    const minuto = Math.floor(valorInicio / minutos)\n    result += `${minuto}m`\n  } else if (valorInicio > 0) {\n    const mm = valorInicio * 60\n    result += `${Math.floor(mm)}seg`\n  }\n\n  // const minuto = valorInicio;\n  // result += `${minuto}m `;\n\n  return result\n}\n\nexport function getUpTime(init) {\n  const ms = moment().diff(moment(init, 'YYYY-MM-DD HH:mm:ss'))\n  return timeRest(moment.duration(ms).asMinutes()) || 0\n}\n\n/**\n * @function diffExpires\n * @param {number} expires\n * @param {number} dateNow\n * @returns {number} minutes\n */\nexport function diffExpires(expires, dateNow = Date.now()) {\n  const ms = moment(expires).diff(moment(dateNow))\n  return moment.duration(ms).asMinutes()\n}\n\n/**\n * @function dateToStrTimeZone\n * @param {String|Date} date\n * @param {String} to date format\n * @param {String} timezone\n * @returns {String} data formated (to)\n * @example\n * dateToStrTimeZone(new Date(), 'YYYY-MM-DD HH:mm:ss', 'America/Fortaleza');\n */\nexport function dateToStrTimeZone(date, to, timezone) {\n  if (!timezone) return moment(date).format(to || 'YYYY-MM-DD HH:mm:ss')\n  return moment(date)\n    .tz(timezone || 'America/Fortaleza')\n    .format(to || 'YYYY-MM-DD HH:mm:ss')\n}\n\n/**\n *\n * @param {String} strdate\n * @param {String} from date format\n * @param {String} to date format\n * @returns {String} data formated (to)\n * @example\n * strDateFromTo('01/12/19', 'DD/MM/YY', 'YYY-MM-DD')\n */\nexport function strDateFromTo(strdate, from, to = 'YYYY-MM-DD HH:mm:ss') {\n  if (!strdate) return moment().format(to)\n  if (strdate instanceof Date) return moment(strdate).format(to)\n  if (moment.isMoment(strdate)) return strdate.format(to)\n\n  return moment(strdate, from).format(to)\n}\n\n/**\n *\n * @param {*} date\n * @param {*} format\n */\nexport function rangedMonth(date, format) {\n  const r = {\n    start: moment(date).startOf('month'),\n    end: moment(date).endOf('month')\n  }\n\n  if (typeof format === 'boolean') {\n    if (format) return { start: r.start, end: r.end }\n    return { start: r.toDate(), end: r.toDate() }\n  }\n\n  const defFormat = format || 'YYYY-MM-DD HH:mm:ss'\n  return {\n    start: moment(date).startOf('month').format(defFormat),\n    end: moment(date).endOf('month').format(defFormat)\n  }\n}\n\n/**\n * @function extractOfDateTime\n * @param {Date|String} datetime - string YYYY-MM-DD HH:mm:ss\n * @param {String} format date format ex: 'YYYY-MM-DD HH:mm:ss'\n * @param {String} timezone\n */\nexport function extractOfDateTime(datetime, format, timezone) {\n  const all = dateToStrTimeZone(datetime, format, timezone)\n  const spliter = all.split(' ')\n  const time = spliter.length > 1 ? spliter[1] : '00:00:00'\n  const date = spliter.length > 0 ? spliter[0] : 'Invalid date'\n  return {\n    date,\n    time\n  }\n}\n","import chunk from 'chunk'\n\nexport function isDefined(v) {\n  try {\n    return !!(v !== null && v !== undefined)\n  } catch (error) {\n    return false\n  }\n}\n\nexport function notNull(value, defaultValue = true) {\n  return value === undefined || value === null ? defaultValue : value\n}\n\n/**\n * Convert Int To String(Hex)\n * @param {Number} int\n * @param {Number} size integer\n * @param {Boolean} noLeftZero\n * @returns {string} hex(number)\n */\nexport function intToHex(int, size, noLeftZero) {\n  const rmL = s => s.replace(/^0+/, '')\n  try {\n    const hex = Number(int).toString(16).toLocaleUpperCase()\n    const len = hex.length % 2 !== 0 ? hex.length + 1 : hex.length\n    return noLeftZero ? rmL(hex) : hex.padStart(size || len, '0')\n  } catch (e) {\n    const rtn = '00'\n    return noLeftZero ? rmL(rtn) : rtn.padStart(size || 2, '0')\n  }\n}\n\n/**\n * Convert Int To String(Hex)\n * @param {Number} int\n * @returns {string} hex(number)\n */\nexport function intToHex2(int) {\n  try {\n    const hex = Number(int).toString(16).toLocaleUpperCase()\n    const len = hex.length % 2 !== 0 ? hex.length + 1 : hex.length\n    return hex.padStart(len, '0')\n  } catch (e) {\n    return `0${(0).toString(16)}`.slice(-2).toUpperCase()\n  }\n}\n/**\n * @function tryInteger\n * @param {any} value\n * @returns {Number|False}\n */\nexport function tryInteger(value) {\n  const numero = parseInt(value, 10)\n  if (Number.isInteger(numero) || numero <= 0) return numero\n  return false\n}\n\n/**\n * Converte Hexadecimal em Alphanumeric String\n * @function hexToAlphaNumeric\n * @param {Buffer | String | Array<String>} hexx\n * @param {Boolean} preserve se true converte invalid ALPHANUMERIC in space\n * @returns {String} hexadecimal string\n * @example\n * hexToAlphaNumeric('414243') // return 'ABC'\n * hexToAlphaNumeric('413943', true) // return 'A C'\n */\nexport function hexToAlphaNumeric(hexx, preserve) {\n  if (!hexx) return ''\n  let hex = ''\n  if (hexx instanceof Buffer) hex = hexx.toString('hex').toUpperCase()\n  if (Array.isArray(hexx)) hex = hexx.join('').toUpperCase()\n  hex = chunk(hex, 2)\n  let result = ''\n  for (let i = 0; i < hex.length; i++) {\n    const h = hex[i]\n    const num = hexToInt(h)\n    if (preserve) {\n      result += num >= 40 && num <= 126 ? String.fromCharCode(num) : ' '\n    } else if (num >= 40 && num <= 126) result += String.fromCharCode(num)\n  }\n  return result\n}\n\nexport function hex2a(hexx) {\n  const hex = hexx.toString() // force conversion\n  let str = ''\n  for (let i = 0; i < hex.length && hex.substr(i, 2) !== '00'; i += 2) {\n    str += String.fromCharCode(parseInt(hex.substr(i, 2), 16))\n  }\n  return str\n}\n\n/**\n * Convert HEX To String UTF-8\n * @param {Buffer} hex\n * @returns {string} ASCII(hex)\n */\nexport function hexToASC(hex) {\n  try {\n    if (hex instanceof Buffer) {\n      return hex.toString('utf8')\n    }\n    if (Array.isArray(hex)) return Buffer.from(hex.join(''), 'hex').toString('utf8')\n    return Buffer.from(hex, 'hex').toString('utf8')\n  } catch (error) {\n    return ''\n  }\n}\n\n/**\n * Convert ASCII To String(Hex)\n * @param {String} str\n * @returns {string} hex(number)\n */\nexport function ASCToHex(str) {\n  const arr1 = []\n  for (let n = 0, l = str.length; n < l; n++) {\n    const hex = Number(str.charCodeAt(n)).toString(16)\n    arr1.push(hex)\n  }\n  return arr1.join('')\n}\n\n/**\n * @function hexToInt\n * @param {String | Array} strhex\n * @returns {Number} decimal ASCII\n * @example\n * hexToInt('41'); // return 'A'\n * hexToInt(['41','42','43']); // return ['A','B','C']\n */\nexport function hexToInt(strhex) {\n  if (Array.isArray(strhex)) return strhex.map(item => hexToInt(item))\n  try {\n    const result = parseInt(strhex, 16)\n    return result\n  } catch (error) {\n    return 0\n  }\n}\n","// import _ from 'lodash'\nimport { forceArray } from './array'\n\n/**\n * Check if there is ownership in an object\n * @function objectHasKeys\n * @param {Object} obj\n * @param {Array<String>} keys\n * @returns {boolean}\n * @example\n * objectHasKeys({ a: 1, b: 2}, ['b','c']) // true match 'b'\n * objectHasKeys({ a: 1, b: 2}, ['c']) // false\n */\nexport function objectHasKeys(obj, keys) {\n  const keysO = Object.keys(obj)\n  for (let i = 0; i < keysO.length; i++) {\n    if (!keys.includes(keysO[i])) return true\n  }\n  return false\n}\n\n/**\n * Get object by omitting properties\n * @function objectWithoutProperties\n * @param {Object} obj\n * @param {Array<string>} keys\n * @returns {Object}\n * @example\n * objectWithoutProperties({ a: 1, b: 2, c: 3 }, ['b'])\n * // return { a: 1, c: 3 }\n */\nexport function objectWithoutProperties(obj, keys) {\n  const target = {}\n  const keysO = Object.keys(obj)\n  for (let i = 0; i < keysO.length; i++) {\n    const k = keysO[i]\n    if (!keys.includes(k)) target[k] = obj[k]\n  }\n  return target\n}\n\n/**\n * Compares object and returns only existing keys\n * @function onlyWithProperties\n * @param {Object} obj\n * @param {Array<string>|Object|String} keys\n * @returns {Object}\n * @example\n * onlyWithProperties({ a: 1, b: 2, c: 3 }, ['b']) // produce { b: 2 }\n * onlyWithProperties({ a: 1, b: 2, c: 3 }, { b: 1 }) // produce { b: 2 }\n * onlyWithProperties({ a: 1, b: 2, c: 3 }, 'b') // produce { b: 2 }\n */\nexport function onlyWithProperties(obj, keys = []) {\n  const target = {}\n  const keysCompare = forceArray(typeof keys === 'object' ? Object.keys(keys) : keys)\n  const keysO = Object.keys(obj)\n  for (let i = 0; i < keysO.length; i++) {\n    const k = keysO[i]\n    if (keysCompare.includes(k)) target[k] = obj[k]\n  }\n  return target\n}\n\n/**\n * @typedef {Object} replaceObjectOptions\n * @property {Boolean} clone clone this\n * @property {Boolean} inc incremental keys\n */\n\n/**\n * Replace object values\n * @function replaceObject\n * @param {Object} dest\n * @param {Object} src\n * @param {replaceObjectOptions} options\n * @returns {Object} object affected\n */\n// export function replaceObject(dest, src, options) {\n//   if (!dest || !src) return false\n//   const funcCopy = value => (options && options.clone ? _.cloneDeep(value) : value)\n\n//   Object.keys(src).forEach(key => {\n//     if ((options && options.inc) || key in dest) {\n//       // eslint-disable-next-line no-param-reassign\n//       dest[key] = funcCopy(src[key])\n//     }\n//   })\n\n//   return dest\n// }\n\n/**\n * Sorts array of objects\n * credits: https://www.sitepoint.com/sort-an-array-of-objects-in-javascript/\n * @function compareValues\n * @param {String} key\n * @param {String} order\n * @example\n * myArray.sort(compareValues('name', 'desc'));\n */\nexport function compareValues(key, order = 'asc') {\n  return function innerSort(a, b) {\n    if (!(key in a) || !(key in a)) return 0\n    const varA = typeof a[key] === 'string' ? a[key].toUpperCase() : a[key]\n    const varB = typeof b[key] === 'string' ? b[key].toUpperCase() : b[key]\n\n    let comparison = 0\n    if (varA > varB) {\n      comparison = 1\n    } else if (varA < varB) {\n      comparison = -1\n    }\n    return order === 'desc' ? comparison * -1 : comparison\n  }\n}\n","/**\n * Arredonda numero com casas decimais\n * @function round\n * @param {Number} number\n * @param {Number} precision\n * @example\n * round(1234.5678, 1); // 1234.6\n */\nexport function round(number, precision = 4) {\n  if (!number || (number && number === 0)) return 0\n  const factor = Math.pow(10, precision)\n  const tempNumber = number * factor\n  const roundedTempNumber = Math.round(tempNumber)\n  return roundedTempNumber / factor\n}\n\n/**\n * Arredonda numero com casas decimais\n * @function round2\n * @param {Number} number\n * @param {Number} precision\n * @example\n * round2(1234.5678, 1); // 1234.6\n */\nexport function round2(number, precision = 4) {\n  if (!number || (number && number === 0)) return 0\n  if (typeof number === 'string') return parseFloat(number).toFixed(precision)\n  if (typeof number === 'number') return number.toFixed(precision)\n  return 0\n}\n\nexport function round3(number, precision = 4) {\n  return +`${Math.round(`${number}e+${precision}`)}e-${precision}`\n}\n"],"names":["range","begin","end","interval","i","g","self","window","global","this","replaceAll","str","needle","replacement","Array","isArray","rtn","length","split","join","getRandomInt","min","max","Math","ceil","floor","random","getRamdomHex","size","crypto","randomBytes","toString","timeRest","inMinutes","dias","semanas","meses","anos","valorInicio","result","ano","mes","semana","dia","hora","mm","dateToStrTimeZone","date","to","timezone","moment","tz","format","hexToInt","strhex","map","item","parseInt","error","arr1","n","l","hex","Number","charCodeAt","push","buf","Buffer","chunk","replace","word","index","toLowerCase","toUpperCase","key","order","a","b","varA","varB","comparison","expires","dateNow","Date","now","ms","diff","duration","asMinutes","url","hostname","indexOf","datetime","spliter","time","text","trim","bytes","decimals","dm","log","parseFloat","pow","toFixed","payload","secret","uid","uuid","p","JSON","stringify","md5","getInRamdom","object","arrKeys","Object","keys","arrstr","len","whitelist","fill","q","getRandomValues","Uint8Array","init","toBuffer","hash","from","hexx","substr","String","fromCharCode","preserve","num","int","noLeftZero","rmL","s","toLocaleUpperCase","padStart","e","slice","v","test","strMac","inputString","value","defaultValue","obj","target","keysO","k","includes","keysCompare","forceArray","fim","r","start","startOf","endOf","toDate","defFormat","removeAll","chars","c","element","number","precision","factor","tempNumber","round","strdate","isMoment","cases","w","mask","im","is","charAt","numero","isInteger","arr","forEach","glob","encodeURIComponent"],"mappings":"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"}