{"version":3,"file":"index.es.js","sources":["../src/array.js","../src/string.js"],"sourcesContent":["import chunk from 'chunk'\n\n/**\n * Force any values an array\n * @function forceArray\n * @param {any} value\n * @return {Array}\n * @example\n * forceArray('1') // return ['1']\n */\nexport function forceArray(value = []) {\n  return !Array.isArray(value) ? [value] : value\n}\n\n/**\n * If array return first item\n * @function unArray\n * @param {Array} arr\n */\nexport function unArray(arr) {\n  if (!Array.isArray(arr)) return arr\n  if (arr.length > 0) return arr[0]\n  return false\n}\n\n/**\n * @function range\n * @param {Number} begin\n * @param {Number} end\n * @param {Number} interval\n */\nexport function* range(begin, end, interval = 1) {\n  for (let i = begin; i <= end; i += interval) {\n    yield i\n  }\n}\n\n/**\n * @function rangeArray\n * @param {Number} init\n * @param {Number} fim\n * @param {Number} interval\n * @returns {Array<number>}\n * @example\n * rangeArray(1, 5, 1) // [1,2,3,4,5]\n */\nexport function rangeArray(init, fim, interval = 1) {\n  return Array.from(range(init, fim, interval))\n}\n\n/**\n * Convert Buffer in Array\n * @param {Buffer|ArrayBuffer|string} buf dataBuffer\n * @returns {Array} chunked\n * @example\n * buffToArray('A03B18') // return ['A0','3B','18']\n */\nexport function buffToArray(buf, size = 2) {\n  if (!buf) return []\n  if (buf instanceof Buffer) {\n    return chunk(buf.toString('hex'), size)\n  }\n  if (Array.isArray(buf)) return buf\n  return chunk(buf.replace(/ /g, ''), size)\n}\n\n/**\n * @function medianInArray\n * @param {Array<Number>} arr array of Numbers\n * @param {Boolean} withZero\n * @returns {Number}\n */\nexport function medianInArray(arr, withZero) {\n  if (!Array.isArray(arr)) return 0\n  const array = withZero ? arr.map(a => a || 0) : arr.filter(a => !!(a && a > 0))\n  array.sort((a, b) => a - b)\n  const lowMid = Math.floor((array.length - 1) / 2)\n  const highMid = Math.ceil((array.length - 1) / 2)\n  return (array[lowMid] + array[highMid]) / 2\n}\n\n/**\n * @function averageInArray\n * @param {Array<Number>} arr array of Numbers\n * @param {Boolean} withZero\n * @returns {Number}\n */\nexport function averageInArray(arr, withZero) {\n  if (!Array.isArray(arr)) return 0\n  const array = withZero ? arr.map(a => a || 0) : arr.filter(f => f)\n  return array.reduce((a, b) => a + b, 0) / array.length\n}\n\n/**\n * @function sumArray\n * @param {Array<Number>} arrOfNumber\n * @param {boolean} checkNumber\n * @returns {Number} sum\n * @example\n * var arr = [4, 2, 8, 6];\n * sumArray(arr) // return 20\n * sumArray(['1','teste', 2], true) // return 3\n */\nexport function sumArray(arrOfNumber, checkNumber) {\n  const sum = (t, n) => {\n    if (checkNumber) return t + typeof n === 'number' ? n : parseInt(n, 10) || 0\n    return t + n\n  }\n  return forceArray(arrOfNumber).reduce(sum)\n}\n\nexport function includesInArrayObject(arrObject, key, value) {\n  return arrObject.some(el => !!(key in el && el[key] === value))\n}\n","/* eslint-disable prefer-destructuring */\nexport const defaultForbidenChars = \"'@#$%¨&*()_+{}?^:><|¹²³£¢¬§ªº°;.,~´`=-\"\n\n/**\n * Remove the first character\n * @function rmFirstChar\n * @param {String} str\n * @returns {String} string modified\n */\nexport function rmFirstChar(str) {\n  return str.slice(1)\n}\n\nexport function rmLastChar(element) {\n  return element.slice(0, element.length - 1)\n}\n\n/**\n * Primeira palavra da sentenca\n * @function firstWord\n * @param {String} text\n * @returns {String}\n * @example\n * firstWord('Leandro Sbrissa') // Leandro\n */\nexport function firstWord(text) {\n  if (!text) return ''\n  const fullName = text.trim().split(' ')\n  return fullName[0]\n}\n\n/**\n * Ultima palavra da sentenca\n * @function lastWord\n * @param {String} text\n * @returns {String}\n * @example\n * lastWord('Leandro Sbrissa') // Sbrissa\n */\nexport function lastWord(text) {\n  if (!text) return ''\n  const fullName = text.trim().split(' ')\n  return fullName.slice(-1).join(' ') || ''\n}\n\n/**\n * @function replaceAll\n * @param {String} str\n * @param {String} needle\n * @param {String} replacement\n * @example\n * replaceAll('T*T', '*', '_') // return 'T_T'\n */\nexport function replaceAll(str, needle, replacement) {\n  if (!str) return ''\n  if (Array.isArray(needle)) {\n    let rtn = `${str}`\n    for (let i = 0; i < needle.length; i++) {\n      rtn = replaceAll(rtn, needle[i], replacement)\n    }\n    return rtn\n  }\n  return str.split(needle).join(replacement)\n}\n\n/**\n * @function removeAll\n * @param {String|Array<string>} str\n * @param {String|Array<string>} chars\n * @returns {String|Array<string>}\n * @example\n * removeAll('TEST#$_', '#$_') // return 'TEST'\n */\nexport function removeAll(str, chars = defaultForbidenChars, replacement = '') {\n  if (!str) return ''\n  if (Array.isArray(str)) return str.map(r => removeAll(r, chars, replacement))\n  const c = Array.isArray(chars) ? chars : chars.split('')\n  let result = str\n  for (let i = 0; i < c.length; i++) result = replaceAll(result, c[i], replacement)\n  return result\n}\n\n/**\n * Primeiras letras em maiuscula\n * @function titleize\n * @param {String} text\n * @returns {String}\n * @example\n * titleize('teste de maiuscula') // Teste de Maiuscula\n */\nexport function titleize(text) {\n  if (!text) return ''\n  const cases = ['de', 'do', 'da', 'dos', 'das', 'a', 'o', 'as', 'os', 'e', 'di']\n  const words = text.toLowerCase().trim().split(' ')\n  return words\n    .map(w => {\n      if (cases.indexOf(w) < 0) {\n        return `${w[0].toUpperCase()}${w.slice(1)}`\n      }\n      return w\n    })\n    .join(' ')\n}\n\n/**\n * Verify if String is MAC address\n * @function isMAC\n * @param {String} strMac\n * @returns {Boolean}\n */\nexport function isMAC(strMac) {\n  if (!strMac) return false\n  if (strMac.indexOf(':') >= 0 && strMac.length !== 17) return false\n  if (strMac.indexOf(':') < 0 && strMac.length !== 12) return false\n  const re = /^[a-fA-F0-9:]{17}|[a-fA-F0-9]{12}$/g\n  return re.test(strMac)\n}\n\nexport function isHexReg(str) {\n  const re = /[0-9A-Fa-f]{6}/g\n  return re.test(str)\n  // re.lastIndex = 0; // be sure to reset the index after using .text()\n}\n\n// export function isHex(h) {\n//   const a = parseInt(h, 16)\n//   return a.toString(16) === h\n// }\n\n/**\n * @function extractHostname\n * @param {String} url\n * @returns {String}\n */\nexport function extractHostname(url) {\n  let hostname\n  if (url.indexOf('//') > -1) {\n    hostname = url.split('/')[2]\n  } else {\n    hostname = url.split('/')[0]\n  }\n  hostname = hostname.split(':')[0]\n  hostname = hostname.split('?')[0]\n  return hostname\n}\n\n/**\n * @function toMask\n * @param {string} mask\n * @param {Number|String} number alphanumeric\n * @returns {String}\n * @example\n * toMask('XXX-XXXX', ABC1234) // ABC-1234\n */\nexport function toMask(mask, number) {\n  if (!number) return ''\n  const s = `${number}`\n  let r = ''\n  for (let im = 0, is = 0; im < mask.length && is < s.length; im++) {\n    r += mask.charAt(im) === 'X' ? s.charAt(is++) : mask.charAt(im)\n  }\n  return r\n}\n\n/**\n * @function isValidTime\n * @param {string} str\n * @returns {Boolean}\n */\nexport function isValidTime(str) {\n  return /^([0-1]?[0-9]|2[0-4]):([0-5][0-9])(:[0-5][0-9])?$/.test(str)\n}\n\n/**\n * @function formatBytes\n * @param {Number} bytes numero em bytes\n * @param {Number} decimals casas decimais\n * @example\n * // formatBytes(bytes,decimals)\n * formatBytes(1024);       // 1 KB\n * formatBytes('1024');     // 1 KB\n * formatBytes(1234);       // 1.21 KB\n * formatBytes(1234, 3);    // 1.205 KB\n */\nexport function formatBytes(bytes, decimals = 2) {\n  if (bytes === 0) return '0 Bytes'\n\n  const k = 1024\n  const dm = decimals < 0 ? 0 : decimals\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n\n  const i = Math.floor(Math.log(bytes) / Math.log(k))\n\n  return `${parseFloat((bytes / Math.pow(k, i)).toFixed(dm))} ${sizes[i]}`\n}\n\n/**\n * @function camelize\n * @param {String} str\n * {@link https://stackoverflow.com/questions/2970525/converting-any-string-into-camel-case StackOverflow}.\n * @example\n * camelize(\"EquipmentClass name\");\n * camelize(\"Equipment className\");\n * camelize(\"equipment class name\");\n * camelize(\"Equipment Class Name\");\n * // all output \"equipmentClassName\"\n */\nexport function camelize(str) {\n  return str\n    .replace(/(?:^\\w|[A-Z]|\\b\\w)/g, (word, index) => {\n      return index === 0 ? word.toLowerCase() : word.toUpperCase()\n    })\n    .replace(/\\s+/g, '')\n}\n"],"names":["unArray","arr","Array","isArray","length","range","begin","end","interval","i","rangeArray","init","fim","from","buffToArray","buf","size","Buffer","chunk","toString","replace","defaultForbidenChars","rmFirstChar","str","slice","rmLastChar","element","firstWord","text","trim","split","replaceAll","needle","replacement","rtn","join","removeAll","chars","map","r","c","result","titleize","cases","toLowerCase","w","indexOf","toUpperCase","isMAC","strMac","test","isHexReg","extractHostname","url","hostname","toMask","mask","number","s","im","is","charAt","isValidTime"],"mappings":"qBAmBO,SAASA,EAAQC,UACjBC,MAAMC,QAAQF,GACfA,EAAIG,OAAS,GAAUH,EAAI,GADCA,EAW3B,SAAUI,EAAMC,EAAOC,EAAKC,EAAW,OACvC,IAAIC,EAAIH,EAAOG,GAAKF,EAAKE,GAAKD,QAC3BC,EAaH,SAASC,EAAWC,EAAMC,EAAKJ,EAAW,UACxCN,MAAMW,KAAKR,EAAMM,EAAMC,EAAKJ,IAU9B,SAASM,EAAYC,EAAKC,EAAO,UACjCD,EACDA,aAAeE,OACVC,EAAMH,EAAII,SAAS,OAAQH,GAEhCd,MAAMC,QAAQY,GAAaA,EACxBG,EAAMH,EAAIK,QAAQ,KAAM,IAAKJ,GALnB,yDCzDNK,EAAuB,yCAQ7B,SAASC,EAAYC,UACnBA,EAAIC,MAAM,GAGZ,SAASC,EAAWC,UAClBA,EAAQF,MAAM,EAAGE,EAAQtB,OAAS,GAWpC,SAASuB,EAAUC,OACnBA,EAAM,MAAO,UACDA,EAAKC,OAAOC,MAAM,KACnB,GAyBX,SAASC,EAAWR,EAAKS,EAAQC,OACjCV,EAAK,MAAO,MACbrB,MAAMC,QAAQ6B,GAAS,KACrBE,EAAO,GAAEX,QACR,IAAId,EAAI,EAAGA,EAAIuB,EAAO5B,OAAQK,IACjCyB,EAAMH,EAAWG,EAAKF,EAAOvB,GAAIwB,UAE5BC,SAEFX,EAAIO,MAAME,GAAQG,KAAKF,GAWzB,SAASG,EAAUb,EAAKc,EAxEK,yCAwEyBJ,EAAc,QACpEV,EAAK,MAAO,MACbrB,MAAMC,QAAQoB,GAAM,OAAOA,EAAIe,KAAIC,GAAKH,EAAUG,EAAGF,EAAOJ,WAC1DO,EAAItC,MAAMC,QAAQkC,GAASA,EAAQA,EAAMP,MAAM,QACjDW,EAASlB,MACR,IAAId,EAAI,EAAGA,EAAI+B,EAAEpC,OAAQK,IAAKgC,EAASV,EAAWU,EAAQD,EAAE/B,GAAIwB,UAC9DQ,EAWF,SAASC,EAASd,OAClBA,EAAM,MAAO,SACZe,EAAQ,CAAC,KAAM,KAAM,KAAM,MAAO,MAAO,IAAK,IAAK,KAAM,KAAM,IAAK,aAC5Df,EAAKgB,cAAcf,OAAOC,MAAM,KAE3CQ,KAAIO,GACCF,EAAMG,QAAQD,GAAK,EACb,GAAEA,EAAE,GAAGE,gBAAgBF,EAAErB,MAAM,KAElCqB,IAERV,KAAK,KASH,SAASa,EAAMC,OACfA,EAAQ,OAAO,KAChBA,EAAOH,QAAQ,MAAQ,GAAuB,KAAlBG,EAAO7C,OAAe,OAAO,KACzD6C,EAAOH,QAAQ,KAAO,GAAuB,KAAlBG,EAAO7C,OAAe,OAAO,QACjD,sCACD8C,KAAKD,GAGV,SAASE,EAAS5B,SACZ,kBACD2B,KAAK3B,GAcV,SAAS6B,EAAgBC,OAC1BC,SAEFA,EADED,EAAIP,QAAQ,OAAS,EACZO,EAAIvB,MAAM,KAAK,GAEfuB,EAAIvB,MAAM,KAAK,GAE5BwB,EAAWA,EAASxB,MAAM,KAAK,GAC/BwB,EAAWA,EAASxB,MAAM,KAAK,GACxBwB,EAWF,SAASC,EAAOC,EAAMC,OACtBA,EAAQ,MAAO,SACdC,EAAK,GAAED,QACTlB,EAAI,OACH,IAAIoB,EAAK,EAAGC,EAAK,EAAGD,EAAKH,EAAKpD,QAAUwD,EAAKF,EAAEtD,OAAQuD,IAC1DpB,GAAyB,MAApBiB,EAAKK,OAAOF,GAAcD,EAAEG,OAAOD,KAAQJ,EAAKK,OAAOF,UAEvDpB,EAQF,SAASuB,EAAYvC,SACnB,oDAAoD2B,KAAK3B"}