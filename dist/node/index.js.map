{"version":3,"file":"index.js","sources":["../../src/node/file.js","../../src/node/image.js"],"sourcesContent":["import { createHash } from 'crypto'\nimport fs from 'fs'\nimport { join, extname, parse } from 'path'\n\n// eslint-disable-next-line no-new-func\nexport const isNode = new Function('try {return this===global;}catch(e){return false;}')\n\n// eslint-disable-next-line no-new-func\nexport const isBrowser = new Function('try {return this===window;}catch(e){ return false;}')\n\n/**\n * @function fileHash\n * @param {string} filename\n * @param {'sha1'|'md5'|'sha256'|'sha512'} algorithm\n * @returns {Promise<string>|false}\n */\nexport async function fileHash(filename, algorithm = 'md5') {\n  if (isBrowser()) return false\n  const result = new Promise((resolve, reject) => {\n    try {\n      const shasum = createHash(algorithm)\n      const s = fs.ReadStream(filename)\n      s.on('data', data => shasum.update(data))\n\n      // making digest\n      s.on('end', () => {\n        const hash = shasum.digest('hex')\n        return resolve(hash)\n      })\n    } catch (error) {\n      return reject(error)\n    }\n  })\n\n  return result\n}\n\n/**\n * using path.parse\n * @function fileParse\n * @param {String} filePath\n * @returns {import('path').ParsedPath}\n */\nexport function fileParse(filePath) {\n  if (isNode()) {\n    return filePath && parse(filePath)\n  }\n}\n\n/**\n * @function pathJoin\n * @param {...string} paths\n * @returns {string}\n */\nexport function pathJoin(...paths) {\n  if (isNode()) {\n    return join(...paths)\n  }\n}\n\n/**\n * using path.extname\n * @function extName\n * @param {string} filePath\n * @returns {string} extension ex: '.png'\n */\nexport function extName(filePath) {\n  if (isNode()) {\n    return extname(filePath) || ''\n  }\n}\n\n/**\n * @function fileExists\n * @param {string} filePath\n * @returns {boolean}\n */\nexport function fileExists(filePath) {\n  try {\n    if (isNode()) {\n      return !!fs.existsSync(filePath)\n    }\n  } catch (err) {\n    return false\n  }\n}\n\n/**\n * @function deleteFile\n * @param {string} filePath\n * @returns {Promise<Boolean>}\n */\nexport async function deleteFile(filePath) {\n  try {\n    if (isNode() && fileExists(filePath)) fs.unlinkSync(filePath)\n    return true\n  } catch (_error) {\n    return false\n  }\n}\n\n/**\n * @function renameFile\n * @param {String} oldPath\n * @param {String} newPath\n * @param {Boolean} force\n * @returns {Boolean}\n */\nexport function renameFile(oldPath, newPath, force) {\n  try {\n    if (isNode()) {\n      if (force && fileExists(newPath)) {\n        fs.unlinkSync(newPath)\n      }\n      fs.renameSync(oldPath, newPath)\n      return true\n    }\n    return false\n  } catch (_error) {\n    return false\n  }\n}\n\n/**\n * @function copyFile\n * @param {string} source\n * @param {string} target\n * @returns {Promise<boolean>}\n */\nexport async function copyFile(source, target) {\n  if (isBrowser()) return false\n\n  const result = await new Promise(resolve => {\n    fs.copyFile(source, target, err => {\n      if (err) return resolve(false)\n      return resolve(true)\n    })\n  })\n  return result\n}\n","import { base64Sync } from './base64'\n\n/**\n * @deprecated use base64Sync\n * @function toBase64Img\n * @param {string} filePath\n * @returns {string}\n */\nexport function toBase64Img(filePath) {\n  return base64Sync(filePath)\n}\n"],"names":["isNode","Function","isBrowser","fileExists","filePath","fs","existsSync","err","async","source","target","Promise","resolve","copyFile","unlinkSync","_error","extname","filename","algorithm","reject","shasum","createHash","s","ReadStream","on","data","update","hash","digest","error","parse","paths","join","oldPath","newPath","force","renameSync","base64Sync"],"mappings":"uNAKaA,EAAS,IAAIC,SAAS,sDAGtBC,EAAY,IAAID,SAAS,uDAqE/B,SAASE,EAAWC,UAEnBJ,YACOK,UAAGC,WAAWF,GAEzB,MAAOG,UACA;;;;;;;;;;;;;;;k3EA8CJC,eAAwBC,EAAQC,UACjCR,WAEiB,IAAIS,SAAQC,IAC/BP,UAAGQ,SAASJ,EAAQC,GAAQH,GACVK,GAAZL,4BA1CHC,eAA0BJ,cAEzBJ,KAAYG,EAAWC,IAAWC,UAAGS,WAAWV,IAC7C,EACP,MAAOW,UACA,oBA/BJ,SAAiBX,MAClBJ,WACKgB,UAAQZ,IAAa,0CApDzBI,eAAwBS,EAAUC,EAAY,cAC/ChB,KACW,IAAIS,SAAQ,CAACC,EAASO,eAE3BC,EAASC,aAAWH,GACpBI,EAAIjB,UAAGkB,WAAWN,GACxBK,EAAEE,GAAG,QAAQC,GAAQL,EAAOM,OAAOD,KAGnCH,EAAEE,GAAG,OAAO,WACJG,EAAOP,EAAOQ,OAAO,cACpBhB,EAAQe,MAEjB,MAAOE,UACAV,EAAOU,0BAab,SAAmBzB,MACpBJ,WACKI,GAAY0B,QAAM1B,0DAStB,YAAqB2B,MACtB/B,WACKgC,UAAQD,uBAoDZ,SAAoBE,EAASC,EAASC,eAErCnC,MACEmC,GAAShC,EAAW+B,IACtB7B,UAAGS,WAAWoB,GAEhB7B,UAAG+B,WAAWH,EAASC,IAChB,GAGT,MAAOnB,UACA,wBC/GJ,SAAqBX,UACnBiC,EAAWjC"}