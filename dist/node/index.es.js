import{createHash as n}from"crypto";import r from"fs";import{parse as t,join as e,extname as c}from"path";const u=new Function("try {return this===global;}catch(e){return false;}"),i=new Function("try {return this===window;}catch(e){ return false;}");async function o(t,e="md5"){if(i())return!1;return new Promise(((c,u)=>{try{const u=n(e),i=r.ReadStream(t);i.on("data",(n=>u.update(n))),i.on("end",(()=>{const n=u.digest("hex");return c(n)}))}catch(n){return u(n)}}))}function a(n){if(u())return n&&t(n)}function f(...n){if(u())return e(...n)}function s(n){if(u())return c(n)||""}function y(n){try{if(u())return!!r.existsSync(n)}catch(n){return!1}}async function m(n){try{return u()&&y(n)&&r.unlinkSync(n),!0}catch(n){return!1}}function h(n,t,e){try{return!!u()&&(e&&y(t)&&r.unlinkSync(t),r.renameSync(n,t),!0)}catch(n){return!1}}async function l(n,t){if(i())return!1;return await new Promise((e=>{r.copyFile(n,t,(n=>e(!n)))}))}function d(n){const r=function(n){try{return!!require.resolve(n)}catch(r){return console.error(`'${n}' is not found`)&&!1}}("base64-img")&&require("base64-img");return r&&r.base64Sync(n)}export{l as copyFile,m as deleteFile,s as extName,y as fileExists,o as fileHash,a as fileParse,i as isBrowser,u as isNode,f as pathJoin,h as renameFile,d as toBase64Img};
//# sourceMappingURL=index.es.js.map
